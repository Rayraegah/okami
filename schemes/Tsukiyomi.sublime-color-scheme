{
    "name": "Tsukiyomi",
    "author": "Rayraegah",
    "variables":
    {
        ////////////////////////// accents tones
        "yellow":    "#b58900", // split comp
        "orange":    "#cb4b16", // complement
        "red":       "#dc322f", // triad
        "magenta":   "#d33682", // tetrad
        "violet":    "#6c71c4", // analogous
        "blue":      "#268bd2", // monotone
        "cyan":      "#2aa198", // analogous
        "green":     "#859900", // tetrad
        ////////////////////////// dark background tones
        "base03":    "#002b36", // 15 [2]
        "base02":    "#073642", // 20 [1]
        ////////////////////////// content tones
        "base01":    "#586e75", // 45 [A]
        "base00":    "#657b83", // 50 [B]
        "base0":     "#839496", // 60 [C]
        "base1":     "#93a1a1", // 65 [D]
        ////////////////////////// light backgrounds tones
        "base2":     "#eee8d5", // 92 [1]
        "base3":     "#fdf6e3", // 97 [2]
        ////////////////////////// special background tones
        "error":     "#6e2e32", // red
    },
    "globals":
    {
        "foreground": "var(base0)",
        "background": "var(base03)",
        "caret": "var(base2)",
        "invisibles": "var(base01)",
        "line_highlight": "var(base02)",
        "selection": "color(var(base01) blend(var(base02) 15%)",
        "selection_border": "color(var(base01) blend(var(base02) 30%)",
        "inactive_selection": "var(base02)",
        "misspelling": "var(red)",
        "shadow": "#000100",
        "active_guide": "var(base02)",
        "stack_guide": "color(var(base02) alpha(0.5))",
        "highlight": "var(blue)",
        "find_highlight_foreground": "var(base03)",
        "find_highlight": "var(base3)",
        "brackets_options": "underline",
        "brackets_foreground": "var(orange)",
        "bracket_contents_options": "underline",
        "bracket_contents_foreground": "var(blue)",
        "tags_options": "stippled_underline",
        "tags_foreground": "var(magenta)"
    },
    "rules":
    [
        {
            "name": "Comment",
            "scope": "comment, meta.documentation",
            "foreground": "var(base01)"
        },
        {
            "name": "String",
            "scope": "string",
            "foreground": "var(cyan)"
        },
        {
            "name": "Regexp",
            "scope": "string.regexp",
            "foreground": "var(cyan)"
        },
        {
            "name": "Escape character",
            "scope": "constant.character.escape",
            "foreground": "var(red)"
        },
        {
            "name": "Number",
            "scope": "constant.numeric",
            "foreground": "var(violet)"
        },
        {
            "name": "Variable",
            "scope": "variable",
            "foreground": "var(blue)"
        },
        {
            "name": "Variable Function",
            "scope": "variable.function",
            "foreground": "var(yellow)"
        },
        {
            "name": "Variable Language",
            "scope": "variable.language",
            "foreground": "var(magenta)"
        },
        {
            "name": "Keyword",
            "scope": "keyword",
            "foreground": "var(green)"
        },
        {
            "name": "Import",
            "scope": "meta.import keyword, keyword.control.import, keyword.control.import.from, keyword.other.import, keyword.control.at-rule.include, keyword.control.at-rule.import",
            "foreground": "var(orange)"
        },
        {
            "name": "Arithmetical, Assignment, Comparision Operators",
            "scope": "keyword.operator.comparison, keyword.operator.assignment, keyword.operator.arithmetic",
            "foreground": "var(base00)"
        },
        {
            "name": "Storage",
            "scope": "storage",
            "foreground": "var(green)"
        },
        {
            "name": "Storage modifier",
            "scope": "storage.modifier",
            "foreground": "var(base1)"
        },
        {
            "name": "Class",
            "scope": "keyword.control.class, entity.name, entity.name.class, entity.name.type.class",
            "foreground": "var(yellow)"
        },
        {
            "name": "Inherited Class",
            "scope": "entity.other.inherited-class",
            "foreground": "var(blue)"
        },
        {
            "name": "Attribute",
            "scope": "entity.other.attribute-name",
            "foreground": "var(yellow)"
        },
        {
            "name": "Library class",
            "scope": "support, support.type, support.class",
            "foreground": "var(green)"
        },
        {
            "name": "Function name",
            "scope": "entity.name.function",
            "foreground": "var(yellow)"
        },
        {
            "name": "Function parameters keyword",
            "scope": "meta.function.parameters keyword.operator, meta.function-call.arguments keyword.operator.assignment",
            "foreground": "var(orange)"
        },
        {
            "name": "Function call arguments",
            "scope": "meta.function-call.arguments",
            "foreground": "var(base00)"
        },
        {
            "name": "Function call generic",
            "scope": "meta.function-call.generic",
            "foreground": "var(yellow)"
        },
        {
            "name": "Variable start",
            "scope": "punctuation.definition.variable",
            "foreground": "var(green)"
        },
        {
            "name": "Built-in constant",
            "scope": "constant, constant.language, meta.preprocessor",
            "foreground": "var(yellow)"
        },
        {
            "scope": "entity.name.section",
            "foreground": "var(orange)"
        },
        {
            "name": "Support.construct",
            "scope": "support.function.construct, keyword.other.new",
            "foreground": "var(red)"
        },
        {
            "name": "User-defined constant",
            "scope": "constant.character, constant.other",
            "foreground": "var(orange)"
        },
        {
            "name": "Tag name",
            "scope": "entity.name.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Tag start/end",
            "scope": "punctuation.definition.tag.html, punctuation.definition.tag.begin, punctuation.definition.tag.end",
            "foreground": "var(base01)"
        },
        {
            "name": "Library function",
            "scope": "support.function",
            "foreground": "var(green)"
        },
        {
            "name": "Continuation",
            "scope": "punctuation.separator.continuation",
            "foreground": "var(red)"
        },
        {
            "name": "Storage",
            "scope": "storage.type.class, storage.type.function, storage.modifier.global",
            "foreground": "var(base1)"
        },
        {
            "name": "Storage Type",
            "scope": "storage.type",
            "foreground": "var(blue)",
            "font_style": "bold"
        },
        {
            "name": "Exception",
            "scope": "support.type.exception",
            "foreground": "var(orange)"
        },
        {
            "name": "Special",
            "scope": "keyword.other.special-method",
            "foreground": "var(orange)"
        },
        {
            "name": "Invalid",
            "scope": "invalid",
            "background": "var(error)",
            "foreground": "#fff"
        },
        {
            "name": "Quoted String",
            "scope": "string.quoted.double, string.quoted.single",
            "foreground": "var(cyan)"
        },
        {
            "name": "Quotes",
            "scope": "punctuation.definition.string",
            "foreground": "var(base01)"
        },
        {
            "name": "Square Brackets []",
            "scope": "meta.brace.square, punctuation.section.brackets",
            "foreground": "var(blue)"
        },
        {
            "name": "Round () and Curly Brackets {}",
            "scope": "meta.brace.round, meta.brace.curly, punctuation.section, punctuation.section.block, punctuation.definition.parameters, punctuation.section.group",
            "foreground": "var(base00)"
        },
        {
            "name": "[CSS] Standard color value",
            "scope": "support.constant.color, invalid.deprecated.color.w3c-non-standard-color-name.scss",
            "foreground": "var(yellow)"
        },
        {
            "name": "[CSS] Selector > [] and non-spec tags",
            "scope": "meta.selector.css",
            "foreground": "var(base00)"
        },
        {
            "name": "[CSS] Tag",
            "scope": "entity.name.tag.css, entity.name.tag.scss, source.less keyword.control.html.elements, source.sass keyword.control.untitled",
            "foreground": "var(yellow)"
        },
        {
            "name": "[CSS] .class",
            "scope": "entity.other.attribute-name.class",
            "foreground": "var(yellow)"
        },
        {
            "name": "[CSS] #id",
            "scope": "entity.other.attribute-name.id",
            "foreground": "var(yellow)"
        },
        {
            "name": "[CSS] :pseudo",
            "scope": "entity.other.attribute-name.pseudo-element, entity.other.attribute-name.tag.pseudo-element, entity.other.attribute-name.pseudo-class, entity.other.attribute-name.tag.pseudo-class",
            "foreground": "var(blue)"
        },
        {
            "name": "[HTML] =",
            "scope": "text.html.basic meta.tag.other.html, text.html.basic meta.tag.any.html, text.html.basic meta.tag.block.any, text.html.basic meta.tag.inline.any, text.html.basic meta.tag.structure.any.html, text.html.basic source.js.embedded.html, punctuation.separator.key-value.html",
            "foreground": "var(base00)"
        },
        {
            "name": "[HTML] something=",
            "scope": "text.html.basic entity.other.attribute-name.html, meta.tag.xml entity.other.attribute-name",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Ruby] Special Method",
            "scope": "keyword.other.special-method.ruby",
            "foreground": "var(green)"
        },
        {
            "name": "[Ruby] Constant Other",
            "scope": "variable.other.constant.ruby",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Ruby] :symbol",
            "scope": "constant.other.symbol.ruby",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Ruby] Special Method",
            "scope": "keyword.other.special-method.ruby",
            "foreground": "var(orange)"
        },
        {
            "name": "[PHP] Array()",
            "scope": "meta.array support.function.construct.php",
            "foreground": "var(yellow)"
        },
        {
            "name": "[C] Preprocessor",
            "scope": "entity.name.function.preprocessor.c, meta.preprocessor.c.include, meta.preprocessor.macro.c",
            "foreground": "var(orange)"
        },
        {
            "name": "[C] include",
            "scope": "meta.preprocessor.c.include string.quoted.other.lt-gt.include.c, meta.preprocessor.c.include punctuation.definition.string.begin.c, meta.preprocessor.c.include punctuation.definition.string.end.c",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Other]: Removal",
            "scope": "other.package.exclude, other.remove",
            "foreground": "var(red)"
        },
        {
            "name": "[Other]: Add",
            "scope": "other.add",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Tex] {}",
            "scope": "punctuation.section.group.tex , punctuation.definition.arguments.begin.latex, punctuation.definition.arguments.end.latex, punctuation.definition.arguments.latex",
            "foreground": "var(red)"
        },
        {
            "name": "[Tex] {text}",
            "scope": "meta.group.braces.tex",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Tex] Other Math",
            "scope": "string.other.math.tex",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Tex] {var}",
            "scope": "variable.parameter.function.latex",
            "foreground": "var(orange)"
        },
        {
            "name": "[Tex] Math \\\\",
            "scope": "punctuation.definition.constant.math.tex",
            "foreground": "var(red)"
        },
        {
            "name": "[Tex] Constant Math",
            "scope": "text.tex.latex constant.other.math.tex, constant.other.general.math.tex, constant.other.general.math.tex, constant.character.math.tex",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Tex] Other Math String",
            "scope": "string.other.math.tex",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Tex] $",
            "scope": "punctuation.definition.string.begin.tex, punctuation.definition.string.end.tex",
            "foreground": "var(red)"
        },
        {
            "name": "[Tex] \\label",
            "scope": "keyword.control.label.latex, text.tex.latex constant.other.general.math.tex",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Tex] \\label { }",
            "scope": "variable.parameter.definition.label.latex",
            "foreground": "var(red)"
        },
        {
            "name": "[Tex] Function",
            "scope": "support.function.be.latex",
            "foreground": "var(green)"
        },
        {
            "name": "[Tex] Support Function Section",
            "scope": "support.function.section.latex",
            "foreground": "var(orange)"
        },
        {
            "name": "[Tex] Support Function",
            "scope": "support.function.general.tex",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Tex] Reference Label",
            "scope": "keyword.control.ref.latex",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Shell] meta scope in loop",
            "scope": "meta.scope.for-in-loop.shell, variable.other.loop.shell",
            "foreground": "var(base1)"
        },
        {
            "name": "[Shell] Meta Block",
            "scope": "meta.scope.case-block.shell, meta.scope.case-body.shell",
            "foreground": "var(base1)"
        },
        {
            "name": "[Shell] []",
            "scope": "punctuation.definition.logical-expression.shell",
            "foreground": "var(red)"
        },
        {
            "name": "[CPP] Storage",
            "scope": "storage.modifier.c++",
            "foreground": "var(green)"
        },
        {
            "name": "[Perl] functions",
            "scope": "support.function.perl",
            "foreground": "var(blue)"
        },
        {
            "name": "[diff] header",
            "scope": "meta.diff, meta.diff.header",
            "foreground": "var(base01)"
        },
        {
            "name": "[diff] range",
            "scope": "meta.diff.range",
            "foreground": "var(blue)"
        },
        {
            "name": "[diff] deleted",
            "scope": "markup.deleted",
            "foreground": "var(red)"
        },
        {
            "name": "[diff] changed",
            "scope": "markup.changed",
            "foreground": "var(yellow)"
        },
        {
            "name": "[diff] inserted",
            "scope": "markup.inserted",
            "foreground": "var(green)"
        },
        {
            "name": "Warning",
            "scope": "markup.warning",
            "foreground": "var(yellow)"
        },
        {
            "name": "Error",
            "scope": "markup.error",
            "foreground": "var(error)"
        },
        {
            "name": "[Markdown] Heading",
            "scope": "markup.heading, punctuation.definition.heading.markdown",
            "foreground": "var(yellow)",
            "font_style": "bold"
        },
        {
            "name": "[Markdown] quote",
            "scope": "markup.quote",
            "foreground": "var(green)"
        },
        {
            "name": "[Markdown] em",
            "scope": "markup.italic",
            "font_style": "italic"
        },
        {
            "scope": "markup.bold",
            "font_style": "bold"
        },
        {
            "scope": "markup.underline.link.markdown, meta.link.reference constant.other.reference.link.markdown",
            "foreground": "var(cyan)"
        },
        {
            "scope": "constant.other.reference.link.markdown",
            "foreground": "var(violet)"
        },
        {
            "scope": "meta.paragraph.markdown meta.dummy.line-break",
            "background": "var(base01)"
        },
        {
            "name": "SublimeBracketHighlighter",
            "scope": "brackethighlighter.all",
            "foreground": "var(base01)"
        },
        {
            "name": "Find In Files: File Name",
            "scope": "entity.name.filename.find-in-files",
            "foreground": "var(cyan)"
        },
        {
            "name": "Find In Files: Line numbers",
            "scope": "constant.numeric.line-number.find-in-files",
            "foreground": "var(base01)"
        },
        {
            "name": "JavaScript Variables",
            "scope": "variable.other.readwrite.js, variable.other.object.js, variable.other.constant.js",
            "foreground": "var(base0)"
        },
        {
            "name": "JSON values in array in dictionary",
            "scope": "meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json string.quoted.double.json",
            "foreground": "var(base1)"
        },
        {
            "name": "JSON values dictionary in dictionary",
            "scope": "meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json string.quoted.double.json",
            "foreground": "var(base0)"
        },
        {
            "name": "JSON keys in dictionary",
            "scope": "meta.structure.dictionary.json meta.structure.dictionary.key.json string.quoted.double.json",
            "foreground": "var(yellow)"
        },
        {
            "name": "JSON keys in dictionary in dictionary",
            "scope": "meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.key.json string.quoted.double.json",
            "foreground": "var(cyan)"
        },
        {
            "name": "JSON keys in array in dictionary",
            "scope": "meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.key.json string.quoted.double.json",
            "foreground": "var(blue)"
        },
    ]
}